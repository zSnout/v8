---
import { clsx } from "@/components/clsx"
import "./index.postcss"

export interface Props {
  htmlBg?: string
  gray?: boolean
  children: any
  theme?: "light" | "dark"
  title: string
  description: string
  noIndex?: boolean
  og: {
    article?: {
      publishedTime: Date
      modifiedTime?: Date
      authors: readonly string[]
      tags: readonly string[]
    }
    title: string
    imageSrc: string
    imageAlt: string
  }
}

const { og } = Astro.props
const { article } = og
---

<!doctype html>
<html
  class={clsx(
    "flex h-full w-full flex-col scroll-smooth transition-[background-color]",
    Astro.props.theme && "force-" + Astro.props.theme,
    Astro.props.htmlBg || "bg-z-body",
  )}
  lang="en"
>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="canonical" href={Astro.url.href} />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={Astro.props.description} />
    {Astro.props.noIndex && <meta name="robots" content="noindex" />}
    <title>{Astro.props.title}</title>
    <meta property="og:site_name" content="zSnout" />
    <meta property="og:url" content={Astro.url.href} />
    <meta property="og:title" content={og.title} />
    <meta property="og:image" content={og.imageSrc} />
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />
    <meta property="og:description" content={Astro.props.description} />
    <meta property="og:type" content={article ? "article" : "website"} />
    <meta name="twitter:card" content="summary_large_image" />
    <meta property="twitter:domain" content="v8.zsnout.com" />
    <meta property="twitter:url" content={Astro.url.href} />
    <meta name="twitter:title" content={og.title} />
    <meta name="twitter:description" content={Astro.props.description} />
    <meta name="twitter:image" content={og.imageSrc} />

    {
      article ?
        <>
          <meta
            property="article:published_time"
            content={article.publishedTime?.toISOString()}
          />
        </>
      : null
    }
    {
      article?.modifiedTime ?
        <meta
          property="article:modified_time"
          content={article.modifiedTime?.toISOString()}
        />
      : null
    }
    {
      article?.authors.map((author: string) => (
        <meta property="article:author" content={author} />
      ))
    }
    {
      article?.tags.map((tag: string) => (
        <meta property="article:tag" content={tag} />
      ))
    }
  </head>

  <body
    class="flex flex-1 flex-col scroll-smooth transition [.z-ctxmenu_&]:overflow-hidden"
  >
    <div class="contents text-z">
      <slot />
    </div>
  </body>
</html>

<script is:inline>
  const isDeviceDark = matchMedia("(prefers-color-scheme: dark)").matches

  const theme = window.localStorage?.getItem("z8:theme")

  const isDark = isDeviceDark ? theme != "light" : theme == "dark"

  const list = document.documentElement.classList

  requestAnimationFrame(() => {
    list.add("no-transition")
    list.toggle("dark", isDark)

    requestAnimationFrame(() => {
      list.remove("no-transition")
    })
  })
</script>

<script>
  import { isDark } from "@/stores/theme"
  import { createEffect } from "solid-js"

  if (typeof document != "undefined") {
    const list = document.documentElement.classList

    if (import.meta.env.DEV) {
      const warn = console.warn
      console.warn = () => {}
      createEffect(() => list.toggle("dark", isDark()))
      console.warn = warn
    } else {
      createEffect(() => list.toggle("dark", isDark()))
    }
  }
</script>
