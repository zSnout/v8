---
import "katex/dist/katex.min.css"
import type { Props as LayoutProps } from "./Layout.astro"
import PaddedLayout from "./PaddedLayout.astro"
import { clsx } from "@/components/clsx"

export interface Props extends LayoutProps {
  class?: string
}
---

<PaddedLayout maxWidth="max-w-prose" {...Astro.props}>
  <div class="flex h-full w-full flex-1 text-z transition">
    <article
      class={clsx(
        "prose-sp prose prose-slate mx-auto w-full flex-1 py-8 text-z transition dark:prose-invert prose-headings:scroll-mt-20 prose-pre:relative prose-pre:-left-4 prose-pre:w-[calc(100%_+_2em)] prose-hr:relative prose-hr:left-1/2 prose-hr:w-48 prose-hr:-translate-x-1/2 [&_.math]:overflow-x-auto text-pretty",
        Astro.props.class,
      )}
    >
      <slot />
    </article>
  </div>
</PaddedLayout>

<script>
  const article = document.querySelector("article")
  const nav = document.querySelector("nav")
  const marker = document.querySelector<HTMLDivElement>("div#nav-marker")

  if (article && nav && marker) {
    function getTopmostVisibleElement() {
      if (visibleElementIndices.size == 0) {
        return
      }

      return children[Math.min(...visibleElementIndices)]!
    }

    function getCurrentHeading() {
      const result = getTopmostVisibleElement()

      if (!result) {
        return
      }

      let element = result

      while (true) {
        if (element instanceof HTMLHeadingElement) {
          return element
        }

        const previous = element.previousElementSibling

        if (!previous) {
          return
        }

        element = previous
      }
    }

    function moveMarkerToCurrentHeading() {
      const heading = getCurrentHeading()

      if (!heading) {
        marker!.classList.remove("bg-z-border-separator")
        return
      }

      const child = nav!.querySelector<HTMLAnchorElement>(
        `a[href="#${heading.id}"]`,
      )

      if (!child) {
        marker!.classList.remove("bg-z-border-separator")
        return
      }

      const navRect = nav!.getBoundingClientRect()
      const childRect = child.getBoundingClientRect()

      const top = childRect.top - navRect.top
      marker!.style.top = top + "px"
      marker!.classList.add("bg-z-border-separator")
    }

    const children = [...article.children]

    const visibleElementIndices = new Set<number>()

    const observer = new IntersectionObserver(
      (entries) => {
        for (const entry of entries) {
          if (entry.isIntersecting) {
            visibleElementIndices.add(children.indexOf(entry.target))
          } else {
            visibleElementIndices.delete(children.indexOf(entry.target))
          }
        }

        moveMarkerToCurrentHeading()
      },
      { rootMargin: "-64px 0px 0px 0px" },
    )

    for (const child of children) {
      observer.observe(child)
    }
  }
</script>
